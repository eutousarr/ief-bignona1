
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EtablissementScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  slug: 'slug',
  type: 'type',
  jury: 'jury',
  effectif: 'effectif',
  adresse: 'adresse'
};

exports.Prisma.CandidatScalarFieldEnum = {
  id: 'id',
  code: 'code',
  num: 'num',
  prenom: 'prenom',
  nom: 'nom',
  sexe: 'sexe',
  datnais: 'datnais',
  lieunais: 'lieunais',
  aptitude: 'aptitude',
  option: 'option',
  section: 'section',
  jury: 'jury',
  firstEpPart: 'firstEpPart',
  secondEpPart: 'secondEpPart',
  centre: 'centre',
  etablissementId: 'etablissementId',
  presence: 'presence'
};

exports.Prisma.DisciplineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.MatiereScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  coefficient: 'coefficient',
  disciplineId: 'disciplineId'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  score: 'score',
  matiereId: 'matiereId',
  candidatId: 'candidatId'
};

exports.Prisma.CentreScalarFieldEnum = {
  id: 'id',
  centre: 'centre',
  nb_candidats: 'nb_candidats'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  prenom: 'prenom',
  nom: 'nom',
  email: 'email',
  suggessions: 'suggessions',
  phone: 'phone',
  adresse: 'adresse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  ien: 'ien',
  etablissementId: 'etablissementId',
  numero: 'numero',
  prenom: 'prenom',
  nom: 'nom',
  dateNaissance: 'dateNaissance',
  lieuNaissance: 'lieuNaissance',
  photo: 'photo',
  statut: 'statut',
  epOptionnel: 'epOptionnel',
  aptitude: 'aptitude',
  sexe: 'sexe',
  total: 'total',
  moyenne: 'moyenne',
  rang: 'rang',
  resultat: 'resultat',
  red: 'red',
  dic: 'dic',
  tsq: 'tsq',
  svt: 'svt',
  lv1: 'lv1',
  mat: 'mat',
  hg: 'hg',
  ec: 'ec',
  sp: 'sp',
  part: 'part',
  orale: 'orale',
  eps: 'eps'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TypeEtablissement = exports.$Enums.TypeEtablissement = {
  COLLEGE: 'COLLEGE',
  LYCEE: 'LYCEE',
  MIXTE_LYCEE_COLLEGE: 'MIXTE_LYCEE_COLLEGE',
  COLLEGE_PRIVE: 'COLLEGE_PRIVE',
  COLLEGE_PRIVE_MIXTE: 'COLLEGE_PRIVE_MIXTE',
  LYCEE_PRIVE_MIXTE: 'LYCEE_PRIVE_MIXTE'
};

exports.PresenceType = exports.$Enums.PresenceType = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT'
};

exports.Statut = exports.$Enums.Statut = {
  PU: 'PU',
  PR: 'PR',
  CL: 'CL'
};

exports.EpOptionnel = exports.$Enums.EpOptionnel = {
  ESPAGNOL: 'ESPAGNOL',
  ALLEMAND: 'ALLEMAND',
  ITALIEN: 'ITALIEN',
  ARABE: 'ARABE',
  PORTUGAIS: 'PORTUGAIS',
  RUSSE: 'RUSSE',
  TECHNOLOGIE: 'TECHNOLOGIE',
  ECONOMIE_FAMILIALE: 'ECONOMIE_FAMILIALE'
};

exports.Aptitude = exports.$Enums.Aptitude = {
  APTE: 'APTE',
  INAPTE: 'INAPTE'
};

exports.Gender = exports.$Enums.Gender = {
  MASCULIN: 'MASCULIN',
  FEMININ: 'FEMININ'
};

exports.Prisma.ModelName = {
  Etablissement: 'Etablissement',
  Candidat: 'Candidat',
  Discipline: 'Discipline',
  Matiere: 'Matiere',
  Note: 'Note',
  Centre: 'Centre',
  Contact: 'Contact',
  Student: 'Student'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
